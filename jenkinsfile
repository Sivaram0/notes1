@Library('my-shared-library') _  // Reference to your shared library

pipeline {
    agent any

    parameters {
        choice(name: 'ENV', choices: ['DEV', 'TEST', 'PROD'], description: 'Select the environment')
        string(name: 'BUILD', defaultValue: 'xxxx', description: 'Build version')
        string(name: 'REPO', defaultValue: 'xxxx', description: 'Repository URL')
    }

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    try {
                        echo 'Checking out the code from Git repository...'
                        git branch: 'main', url: 'https://git.com/your-repo.git', credentialsId: 'your-credentials-id'
                    } catch (Exception e) {
                        error "Git Checkout failed: ${e.message}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        echo 'Building the application...'
                        sh 'mvn clean install'
                    } catch (Exception e) {
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        echo 'Running SonarQube analysis...'
                        sh 'sonar-scanner -Dsonar.projectKey=my_project -Dsonar.sources=src -Dsonar.host.url=http://your-sonar-server -Dsonar.login=your-sonar-token'
                    } catch (Exception e) {
                        error "SonarQube scan failed: ${e.message}"
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                script {
                    try {
                        echo 'Archiving build artifacts...'
                        archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    } catch (Exception e) {
                        error "Archiving artifacts failed: ${e.message}"
                    }
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    try {
                        echo 'Building Docker image...'
                        sh 'docker build -t my-app:latest .'
                    } catch (Exception e) {
                        error "Docker image build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Docker Image Scan') {
            steps {
                script {
                    try {
                        echo 'Scanning Docker image for vulnerabilities...'
                        sh 'docker scan my-app:latest'
                    } catch (Exception e) {
                        error "Docker image scan failed: ${e.message}"
                    }
                }
            }
        }

        stage('Kubernetes Deployment') {
            steps {
                script {
                    try {
                        echo 'Deploying to Kubernetes...'
                        sh 'kubectl apply -f k8s/deployment.yaml'
                    } catch (Exception e) {
                        error "Kubernetes deployment failed: ${e.message}"
                    }
                }
            }
        }

        stage('Terraform Infrastructure') {
            steps {
                script {
                    try {
                        echo 'Running Terraform to manage infrastructure...'
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                    } catch (Exception e) {
                        error "Terraform execution failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up resources...'
            // Any cleanup actions if necessary (e.g., removing temporary files)
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for errors.'
        }
    }
}



// Include parallel builds
// Include means import shell script attach to the pipeline  rather than inline shell script
// statsh the artifact
// use agent for the docker kubernetes
// Include env_variables, buildtime_variables
// groovy like try catch blocks add to pipeline 
// shared library 
// deal with S3 and azure blob stages in jenkins pipeline
// I need to give privileges to the group to access couple of files like production builds,test,stage,production env


Differenece between C_Intigration -  C_Delivery / C_Deploymentx